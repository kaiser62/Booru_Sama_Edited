name: "Build iOS App (iOS 16.1 Target)"

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          cache: true

      - name: Update Flutter
        run: |
          echo "🔄 Updating Flutter..."
          flutter upgrade --force > /dev/null 2>&1
          echo "✅ Flutter version: $(flutter --version --machine | grep -o '"frameworkVersion":"[^"]*"' | cut -d'"' -f4)"

      - name: Install CocoaPods
        run: |
          echo "📦 Installing CocoaPods..."
          sudo gem install cocoapods > /dev/null 2>&1
          echo "✅ CocoaPods version: $(pod --version)"

      - name: Verify iOS SDK
        run: |
          echo "🍎 iOS SDK check..."
          if xcodebuild -showsdks | grep -q "ios1[6-9]"; then
            echo "✅ iOS 16+ SDK available"
          else
            echo "❌ iOS 16+ SDK not found"
            exit 1
          fi

      - name: Flutter doctor
        run: |
          echo "🔍 Running Flutter doctor..."
          flutter doctor --android-licenses > /dev/null 2>&1 || true
          if flutter doctor | grep -q "No issues found"; then
            echo "✅ Flutter doctor: No issues"
          else
            echo "⚠️ Flutter doctor found issues:"
            flutter doctor | grep "✗\|!"
          fi

      - name: Install dependencies
        run: |
          echo "📥 Installing dependencies..."
          flutter pub get > /dev/null 2>&1
          
          echo "🔨 Running build_runner..."
          flutter pub run build_runner build --delete-conflicting-outputs > /dev/null 2>&1
          echo "✅ Dependencies installed"

      - name: Create env files
        run: |
          echo "⚙️ Creating environment files..."
          mkdir -p env
          echo '{"BASE_URL": "", "API_KEY": ""}' > env/dev.json
          echo '{"BASE_URL": "", "API_KEY": ""}' > env/prod.json
          echo "✅ Environment files created"

      - name: Clean and configure iOS
        run: |
          echo "🧹 Cleaning project..."
          flutter clean > /dev/null 2>&1
          cd ios && rm -rf Pods Podfile.lock && cd ..
          
          echo "⚙️ Configuring iOS deployment target..."
          flutter precache --ios > /dev/null 2>&1
          
          cd ios
          # Update deployment target
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 16.1/g' Runner.xcodeproj/project.pbxproj
          
          # Update Podfile if exists
          if [ -f Podfile ]; then
            sed -i '' "s/platform :ios, '[0-9]*\.[0-9]*'/platform :ios, '16.1'/g" Podfile
            echo "✅ iOS target set to 16.1"
          else
            echo "⚠️ Podfile not found, will be generated during build"
          fi
          cd ..

      - name: Build iOS App
        run: |
          echo "🏗️ Building iOS app..."
          
          # Try prod flavor first
          if flutter build ios --release --no-codesign --flavor prod --dart-define=IPHONEOS_DEPLOYMENT_TARGET=16.1 -t lib/main.dart > build.log 2>&1; then
            echo "✅ Prod build successful!"
            BUILD_FLAVOR="prod"
          elif flutter build ios --release --no-codesign --flavor dev --dart-define-from-file env/dev.json --dart-define=IPHONEOS_DEPLOYMENT_TARGET=16.1 -t lib/main.dart > build.log 2>&1; then
            echo "✅ Dev build successful!"
            BUILD_FLAVOR="dev"
          else
            echo "❌ Build failed! Last 50 lines of build log:"
            tail -50 build.log
            echo ""
            echo "🔍 Checking for common issues..."
            
            # Check for specific error patterns
            if grep -q "Code Signing Error" build.log; then
              echo "→ Code signing issue detected"
            elif grep -q "No such module" build.log; then
              echo "→ Missing module/dependency issue"
            elif grep -q "Minimum deployment target" build.log; then
              echo "→ Deployment target issue"
            elif grep -q "Podfile" build.log; then
              echo "→ CocoaPods issue"
            fi
            
            exit 1
          fi
          
          echo "BUILD_FLAVOR=$BUILD_FLAVOR" >> $GITHUB_ENV

      - name: Create IPA
        run: |
          echo "📦 Creating IPA..."
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload/
          zip -r ../../../boorusama-ios16.1-${{ env.BUILD_FLAVOR }}.ipa Payload/ > /dev/null 2>&1
          echo "✅ IPA created: boorusama-ios16.1-${{ env.BUILD_FLAVOR }}.ipa"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: boorusama-ios16.1-${{ env.BUILD_FLAVOR }}
          path: boorusama-ios16.1-${{ env.BUILD_FLAVOR }}.ipa
          retention-days: 30

      - name: Build Summary
        run: |
          echo "🎉 Build completed successfully!"
          echo "📱 iOS Target: 16.1+"
          echo "🏷️ Flavor: ${{ env.BUILD_FLAVOR }}"
          echo "📂 Artifact: boorusama-ios16.1-${{ env.BUILD_FLAVOR }}.ipa"

      - name: Debug on Failure
        if: failure()
        run: |
          echo "🚨 Build failed - Debug information:"
          echo ""
          echo "Flutter version:"
          flutter --version | head -3
          echo ""
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Last 100 lines of build log:"
          tail -100 build.log 2>/dev/null || echo "No build log found"
          echo ""
          echo "iOS project structure:"
          ls -la ios/ 2>/dev/null || echo "iOS directory not found"
